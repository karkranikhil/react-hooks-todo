{"version":3,"sources":["components/Header.js","components/AddTodo.js","components/TodoListItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["HeaderDiv","styled","h1","_templateObject","Header","memo","props","react_default","a","createElement","AddInputWrapper","div","AddTodo_templateObject","AddInput","input","_templateObject2","Button","button","_templateObject3","AddTodo","type","placeholder","value","inputValue","onChange","onInputChange","onKeyPress","onInputKeyPress","onClick","onButtonClick","Checkbox","span","TodoListItem_templateObject","Table","table","TodoListItem_templateObject2","Td","th","TodoListItem_templateObject3","Third","td","_templateObject4","first","second","Tr","tr","_templateObject5","_templateObject6","TodoListItem","id","concat","onCheckBoxToggle","defaultChecked","checked","htmlFor","text","TodoListItem_Button","className","TodoList_templateObject","TodoList","Fragment","items","length","map","todo","idx","components_TodoListItem","Object","assign","key","onItemRemove","onItemCheck","Wrapper","App_templateObject","App","_useState","useState","_useState2","slicedToArray","setInputValue","_useState3","_useState4","todos","setTodos","clearInputAndAddTodo","_","components_Header","components_AddTodo","event","target","callback","which","keyCode","keyInput","components_TodoList","index","checkTodo","filter","removeTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7aa31f94.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport styled from 'styled-components'\r\nexport const HeaderDiv = styled.h1`\r\n    text-align: center;\r\n`\r\n\r\nconst Header = memo(props => (\r\n    <HeaderDiv>TODO APP</HeaderDiv>\r\n));\r\n\r\nexport default Header;\r\n","import React, { memo } from \"react\";\r\nimport styled from 'styled-components'\r\nexport const AddInputWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 3fr 1fr;\r\n    width: 100%;\r\n    height: 30px;\r\n    font-size: 20px;\r\n`\r\nexport const AddInput= styled.input`\r\n    height: 30px;\r\n    font-size: 20px;\r\n`\r\nexport const Button = styled.button`\r\n    font-size: 26px;\r\n    cursor: pointer;\r\n`\r\n\r\nconst AddTodo = memo(props => (\r\n<AddInputWrapper>\r\n    <AddInput type=\"text\"\r\n    placeholder=\"Add Todo here\"\r\n    value={props.inputValue}\r\n    onChange={props.onInputChange}\r\n    onKeyPress={props.onInputKeyPress}\r\n    />\r\n    <Button onClick={props.onButtonClick}>+</Button>\r\n</AddInputWrapper>\r\n));\r\n\r\nexport default AddTodo;\r\n","import React, { memo } from \"react\";\r\nimport styled from 'styled-components'\r\nexport const Checkbox = styled.span`\r\n    position: relative;\r\n    & label{\r\n        background-color: #fff;\r\n        border: 1px solid #ccc;\r\n        border-radius: 50%;\r\n        cursor: pointer;\r\n        height: 40px;\r\n        left: 0;\r\n        position: absolute;\r\n        top: -11px;\r\n        width: 40px;\r\n        &:after{\r\n            border: 2px solid #fff;\r\n            border-top: none;\r\n            border-right: none;\r\n            content: \"\";\r\n            height: 6px;\r\n            left: 14px;\r\n            opacity: 0;\r\n            position: absolute;\r\n            top: 14px;\r\n            transform: rotate(-45deg);\r\n            width: 12px;\r\n        }\r\n    }\r\n    > input[type=\"checkbox\"] {\r\n        visibility: hidden;\r\n    }\r\n    > input[type=\"checkbox\"]:checked + label {\r\n        background-color: #66bb6a;\r\n        border-color: #66bb6a;\r\n    }\r\n    > input[type=\"checkbox\"]:checked + label:after {\r\n        opacity: 1;\r\n      }\r\n`\r\nexport const Table = styled.table` \r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n    width: 100%;\r\n    border: 1px solid #ddd;\r\n    margin-top: 20px;\r\n`\r\n\r\nexport const Th = styled.th`  \r\n    text-align:${props=>props.Third?'right':'left'};\r\n    padding: 16px;\r\n`\r\nexport const Td = styled.td`  \r\n    text-align:${props=>props.Third?'right':'left'};\r\n    padding-left: ${props=>props.first?'20px;':''};\r\n    font-size: ${props=>props.second?'30px':''};\r\n    width:${props=>props.first?'20%;':props.second?'70%;':props.Third?'10%;':''}\r\n`\r\nexport const Tr = styled.tr`  \r\n    height:50px;\r\n    line-height:50px;\r\n    background: #2d3e50;\r\n    color: #1abb9b;\r\n`\r\nexport const Button = styled.button`  \r\n    background-color: red;\r\n    border: none;\r\n    color: white;\r\n    padding: 20px 25px; \r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: white;\r\n        border:1px solid red;\r\n        color: red;\r\n    }\r\n`\r\nconst TodoListItem = memo(props => (\r\n<Table>\r\n    <tbody>\r\n  <Tr>\r\n    <Td first>\r\n        <Checkbox>\r\n            <input type=\"checkbox\" id={`checkbox.${props.id}`} onClick={props.onCheckBoxToggle} defaultChecked={props.checked} />\r\n            <label htmlFor={`checkbox.${props.id}`}></label>\r\n        </Checkbox>\r\n     </Td>\r\n    <Td second>{props.text}</Td>\r\n    <Td Third><Button onClick={props.onButtonClick}><i className=\"fa fa-trash\"></i></Button></Td>\r\n  </Tr>\r\n  </tbody>\r\n</Table>\r\n));\r\n\r\nexport default TodoListItem;\r\n","import React, { memo } from \"react\";\r\nimport TodoListItem from \"./TodoListItem\";\r\nimport styled from 'styled-components'\r\nexport const TodoListWrapper = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: auto auto auto;\r\ngrid-gap: 2rem;\r\nmargin-top: 25px;\r\n`\r\nconst TodoList = memo(props => (\r\n  <>\r\n    {props.items.length > 0 && (\r\n        <div>\r\n          {props.items.map((todo, idx) => (\r\n            <TodoListItem\r\n              {...todo}\r\n              id={idx}\r\n              key={`TodoItem.${idx}`}\r\n              onButtonClick={() => props.onItemRemove(idx)}\r\n              onCheckBoxToggle={() => props.onItemCheck(idx)}\r\n            />\r\n          ))}\r\n          </div>\r\n    )}\r\n  </>\r\n));\r\n\r\nexport default TodoList;\r\n","import React, { useState, memo } from \"react\";\n//import { useInputValue, useTodos } from \"./custom-hooks\";\nimport styled from 'styled-components'\nimport Header from \"./components/Header\";\n\nimport AddTodo from \"./components/AddTodo\";\nimport TodoList from \"./components/TodoList\";\nexport const Wrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 10px 20px;\n  background: #34495e;\n  color: white;\n  width:500px;\n`\nconst App = memo(props => {\n  const [inputValue, setInputValue] = useState('');\n  const changeInput = event => setInputValue(event.target.value);\n  const clearInput= () => setInputValue(\"\")\n  const keyInput= (event, callback) => {\n    if (event.which === 13 || event.keyCode === 13) {\n      callback(inputValue);\n      return true;\n    }\n    return false;\n  }\n  //const { inputValue, changeInput, clearInput, keyInput } = useInputValue();\n  //const { todos, addTodo, checkTodo, removeTodo } = useTodos();\n  const [todos, setTodos] = useState([]);\n  const addTodo = text => {\n    if (text !== \"\") {\n      setTodos(\n        todos.concat({\n          text,\n          checked: false\n        })\n      );\n    }\n  }\n  const checkTodo = idx => {\n    setTodos(\n      todos.map((todo, index) => {\n        if (idx === index) {\n          todo.checked = !todo.checked;\n        }\n        return todo;\n      })\n    );\n  }\n  const removeTodo= idx => {\n      setTodos(todos.filter((todo, index) => idx !== index));\n    }\n  const clearInputAndAddTodo = _ => {\n    clearInput();\n    addTodo(inputValue);\n  };\n\n  return (\n    <Wrapper>\n      <Header></Header>\n      <AddTodo\n        inputValue={inputValue}\n        onInputChange={changeInput}\n        onButtonClick={clearInputAndAddTodo}\n        onInputKeyPress={event => keyInput(event, clearInputAndAddTodo)}\n      />\n      <TodoList items={todos} onItemCheck={idx => checkTodo(idx)}\n        onItemRemove={idx => removeTodo(idx)}/>\n      </Wrapper>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}